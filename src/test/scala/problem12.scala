import junit.framework.TestCase
import problem12.{getAllDivisors, triangleNums}

import scala.collection.mutable

object problem12 {

  /**
   * The sequence of triangle numbers is generated by adding the natural numbers.
   * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
   *
   * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
   *
   * Let us list the factors of the first seven triangle numbers:
   *
   * 1: 1
   * 3: 1,3
   * 6: 1,2,3,6
   * 10: 1,2,5,10
   * 15: 1,3,5,15
   * 21: 1,3,7,21
   * 28: 1,2,4,7,14,28
   * We can see that 28 is the first triangle number to have over five divisors.
   *
   * What is the value of the first triangle number to have over five hundred divisors?
   *
   * @param args
   */


  val divisorsMap : scala.collection.mutable.Map[BigInt, List[BigInt]] = scala.collection.mutable.Map()

  def main(args: Array[String]): Unit = {

    val start = System.currentTimeMillis()

    val num = 5000

    val result = triangleNums(1, 1)
      .map(_._2)
      .find(getAllDivisors(_).size >= num)
      .get

    println(result)

    println(s"Started at $start, finished at ${System.currentTimeMillis()}")

  }

  def triangleNums(v: BigInt, sum: BigInt): LazyList[(BigInt, BigInt)] = (v, sum) #:: triangleNums(v + 1, sum + v + 1)

  def getAllDivisors(currentNum: BigInt): List[BigInt] = {

   // println(currentNum)

    def getDivisorsList(num: BigInt) = {

      divisorsMap.get(num)  match {
        case None =>
          def allNums(v: BigInt): LazyList[BigInt] = v #:: allNums(v + 1)
          val dList = allNums(1).takeWhile(_ <= num)
            .filter(num % _ == 0)
            .toList
          divisorsMap.put(num, dList)
          dList

        case Some(dList)  =>
       //   println(s"Hit $num!")
          dList
      }

    }

    divisorsMap.get(currentNum) match {
      case None =>
        val divisors = getDivisorsList(currentNum)

        divisors.foreach { x =>
          divisorsMap.put(x, getDivisorsList(x))
        }

        divisors

      case Some(divList)  =>
      //  println("Hit!")
        divList
    }
  }

  /*def getDistinctFactors(currentNum: BigInt): Set[BigInt] = {

    println(s"current num is $currentNum")

      if (currentNum == 6)  {
        println("stop here")
      }

    currentNum match {
      case n if n == 1 => {
        Set(1)
      }
      case n2 => {
        def numsFromSmallToLarge(v: BigInt): LazyList[BigInt] = v #:: numsFromSmallToLarge(v + 1)

       // numsFromSmallToLarge(2).takeWhile(_ <= n2).count(n2 % _ == 0)
        val minDivisor = numsFromSmallToLarge(2).takeWhile(_ <= n2).find(n2 % _ == 0)

        if (minDivisor.get == currentNum) {
          return Set(1, currentNum)
        }


        def numsFromLargeToSmall(v: BigInt): LazyList[BigInt] = v #:: numsFromLargeToSmall(v - 1)
        val maxDivisor = numsFromLargeToSmall(n2-1).takeWhile(_>1).find(n2 % _ == 0)
        //TODO: send with maximal divider
         getDistinctFactors(maxDivisor.get) | getDistinctFactors(n2 / maxDivisor.get) | Set(currentNum)

      //  ( Set(cartesianProduct) | Set(currentNum)).flatten.toList
      }
    }

  }*/

}

class test12 extends TestCase {

  def TestCase() {}

  /**
   * 1 -> 1
   */
  def test1(): Unit = {
    val divNum = 1
    val result = testGeneric(divNum)

    assert(result == divNum)
  }

  /**
   * 3 -> 1,3
   */
  def test3(): Unit = {
    val divNum = 2
    val result = testGeneric(divNum)

    assert(result == 3)
  }

  /**
   * 6 -> 1,2,3,6
   */
  def test6(): Unit = {
    val divNum = 4
    val result = testGeneric(divNum)

    assert(result == 6)
  }

  /**
   *   * 28: 1,2,4,7,14,28
   */
  def test28(): Unit = {
    val divNum = 6
    val result = testGeneric(divNum)

    assert(result == 28)
  }


  private def testGeneric(divisorsNum: BigInt) = {
    triangleNums(1, 1)
      .map(_._2)
      .find(getAllDivisors(_).size == divisorsNum)
      .get
  }
}



